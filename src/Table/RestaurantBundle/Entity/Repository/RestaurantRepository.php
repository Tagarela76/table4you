<?php

namespace Table\RestaurantBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * RestaurantRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RestaurantRepository extends EntityRepository
{

    /**
     * 
     * Get Restaurants
     * 
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getRestaurants()
    {
        $query = $this->createQueryBuilder('restaurant');
        $query->orderBy('restaurant.rating', 'DESC');
        return $query;
    }

    /**
     * 
     * Search restaurants
     * 
     * @param Symfony\Component\HttpFoundation\Request $request
     * @param Symfony\Component\DependencyInjection\ContainerInterface $container
     * 
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function searchRestaurants($request, $container)
    {
        // collect parametres
        $query = $this->createQueryBuilder('restaurant');
        $searchStr = $request->request->get('restaurantSearchStr');
        $categoriesList = $request->request->get('restaurantCategoryList');
        $kitchensList = $request->request->get('restaurantKitchenList');
        $searchCity = $request->request->get('searchCity');

        // set dependency with category and kitchen entitues
        if (!is_null($categoriesList) || !is_null($kitchensList) || $searchStr != "") {
            $query->leftJoin('restaurant.categories', 'category', 'ON restaurant.id = category.id')
                    ->leftJoin('restaurant.kitchens', 'kitchen', 'ON restaurant.id = kitchen.id');
        }

        if (!is_null($searchCity) && $searchCity != "") {
            $query->andWhere("restaurant.city = :searchCity")
                    ->setParameter('searchCity', $searchCity);
        }
        
        if (!is_null($searchStr) && $searchStr != "") {
            
            $searchStrEn = $container->get('common_manager')->translit($searchStr);
            $searchStrRu = $container->get('common_manager')->reverseTranslit($searchStr);
            // using it only in restaurant name
            $searchStrAlternative = $container->get('common_manager')->translateUsingAlternativeAlphabet($searchStr); 
           
            $query->leftJoin('restaurant.city', 'city');
            
            // format query
            $queryString = "restaurant.name like :searchStr or " .
                    "city.name like :searchStr or " .
                    "restaurant.street like :searchStr or " .
                    "category.name like :searchStr or " .
                    "kitchen.name like :searchStr or ";
            if ($searchStrRu != $searchStr) {
                $queryString .= "restaurant.name like :searchStrRu or " .
                        "city.name like :searchStrRu or " .
                        "restaurant.street like :searchStrRu or " .
                        "category.name like :searchStrRu or " .
                        "kitchen.name like :searchStrRu or ";
            }
            if ($searchStrEn != $searchStr) {
                $queryString .= "restaurant.name like :searchStrEn or " .
                        "city.name like :searchStrEn or " .
                        "restaurant.street like :searchStrEn or " .
                        "category.name like :searchStrEn or " .
                        "kitchen.name like :searchStrEn or ";
            }
            $queryString .= "restaurant.name like :searchStrAlternative";
            
            $query->andWhere($queryString)
                    ->setParameter('searchStr', "%$searchStr%");
            if ($searchStrRu != $searchStr) {
                $query->setParameter('searchStrRu', "%$searchStrRu%");
            }
            if ($searchStrEn != $searchStr) {
                $query->setParameter('searchStrEn', "%$searchStrEn%");
            }
            $query->setParameter('searchStrAlternative', "%$searchStrAlternative%");
        }

        if (!is_null($categoriesList) && !empty($categoriesList)) {
            $query->andWhere($query->expr()->in('category.id', $categoriesList));
        }
        if (!is_null($kitchensList) && !empty($kitchensList)) {
            $query->andWhere($query->expr()->in('kitchen.id', $kitchensList));
        }

        $query->orderBy('restaurant.rating', 'DESC');

        return $query;
    }

    /**
     * 
     * Get Restaurants by city
     * 
     * @param integer $city
     * 
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function findByCity($city)
    {
        $query = $this->createQueryBuilder('restaurant')
                ->andWhere("restaurant.city = :city")
                ->setParameter('city', $city)
                ->orderBy('restaurant.rating', 'DESC');
        return $query;
    }

    /**
     * 
     * Get Restaurants for editor user
     * 
     * @param integer $userId
     * 
     * 
     * @return Table\RestaurantBundle\Entity\Restaurant[]
     */
    public function getEditorRestaurants($userId)
    {
        $query = $this->createQueryBuilder('restaurant')
                ->andWhere("restaurant.editorId = :editorId")
                ->setParameter('editorId', $userId)
                ->orderBy('restaurant.name', 'ASC');
        return $query;
    }
}
